/**
 * Gravitee.io Portal Rest API
 * API dedicated to the devportal part of Gravitee
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@graviteesource.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

import { Api } from '../model/api';
import { ApisResponse } from '../model/apisResponse';
import { CategoryApiQuery } from '../model/categoryApiQuery';
import { ErrorResponse } from '../model/errorResponse';
import { Page } from '../model/page';
import { PagesResponse } from '../model/pagesResponse';
import { PlansResponse } from '../model/plansResponse';
import { Rating } from '../model/rating';
import { RatingInput } from '../model/ratingInput';
import { RatingsResponse } from '../model/ratingsResponse';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable({
  providedIn: 'root'
})
export class APIService {

    protected basePath = 'http://demo.gravitee.io/portal/DEFAULT';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();
    public encoder: HttpParameterCodec;

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }



    /**
     * Create a rating for an API
     * Create a rating for an API.  This API has to be accessible by the current user, otherwise a 404 will be returned.  The current must have API_RATING[CREATE] permission to create a rating. 
     * @param apiId Id of an API.
     * @param ratingInput Use to add a rating to an api
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createApiRatingForApi(apiId: string, ratingInput?: RatingInput, observe?: 'body', reportProgress?: boolean): Observable<Rating>;
    public createApiRatingForApi(apiId: string, ratingInput?: RatingInput, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Rating>>;
    public createApiRatingForApi(apiId: string, ratingInput?: RatingInput, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Rating>>;
    public createApiRatingForApi(apiId: string, ratingInput?: RatingInput, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (apiId === null || apiId === undefined) {
            throw new Error('Required parameter apiId was null or undefined when calling createApiRatingForApi.');
        }

        let headers = this.defaultHeaders;

        // authentication (BasicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }
        // authentication (CookieAuth) required
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Rating>(`${this.configuration.basePath}/apis/${encodeURIComponent(String(apiId))}/ratings`,
            ratingInput,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get the API definition
     * Get the detail of an API.  This API has to be accessible by the current user, otherwise a 404 will be returned. 
     * @param apiId Id of an API.
     * @param include Comma-separated list of related objects to include in the response.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getApiByApiId(apiId: string, include?: Array<'pages' | 'plans'>, observe?: 'body', reportProgress?: boolean): Observable<Api>;
    public getApiByApiId(apiId: string, include?: Array<'pages' | 'plans'>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Api>>;
    public getApiByApiId(apiId: string, include?: Array<'pages' | 'plans'>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Api>>;
    public getApiByApiId(apiId: string, include?: Array<'pages' | 'plans'>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (apiId === null || apiId === undefined) {
            throw new Error('Required parameter apiId was null or undefined when calling getApiByApiId.');
        }

        let queryParameters = new HttpParams({encoder: this.encoder});
        if (include) {
            include.forEach((element) => {
                queryParameters = queryParameters.append('include', <any>element);
            })
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        return this.httpClient.get<Api>(`${this.configuration.basePath}/apis/${encodeURIComponent(String(apiId))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * List plans for an API
     * List plans for an API.  This API has to be accessible by the current user, otherwise a 404 will be returned. 
     * @param apiId Id of an API.
     * @param page The page number for pagination.
     * @param size The number of items per page for pagination.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getApiPlansByApiId(apiId: string, page?: number, size?: number, observe?: 'body', reportProgress?: boolean): Observable<PlansResponse>;
    public getApiPlansByApiId(apiId: string, page?: number, size?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PlansResponse>>;
    public getApiPlansByApiId(apiId: string, page?: number, size?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PlansResponse>>;
    public getApiPlansByApiId(apiId: string, page?: number, size?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (apiId === null || apiId === undefined) {
            throw new Error('Required parameter apiId was null or undefined when calling getApiPlansByApiId.');
        }

        let queryParameters = new HttpParams({encoder: this.encoder});
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('page', <any>page);
        }
        if (size !== undefined && size !== null) {
            queryParameters = queryParameters.set('size', <any>size);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        return this.httpClient.get<PlansResponse>(`${this.configuration.basePath}/apis/${encodeURIComponent(String(apiId))}/plans`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * List ratings for an API
     * List ratings for an API.  This API has to be accessible by the current user, otherwise a 404 will be returned. 
     * @param apiId Id of an API.
     * @param page The page number for pagination.
     * @param size The number of items per page for pagination.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getApiRatingsByApiId(apiId: string, page?: number, size?: number, observe?: 'body', reportProgress?: boolean): Observable<RatingsResponse>;
    public getApiRatingsByApiId(apiId: string, page?: number, size?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<RatingsResponse>>;
    public getApiRatingsByApiId(apiId: string, page?: number, size?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<RatingsResponse>>;
    public getApiRatingsByApiId(apiId: string, page?: number, size?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (apiId === null || apiId === undefined) {
            throw new Error('Required parameter apiId was null or undefined when calling getApiRatingsByApiId.');
        }

        let queryParameters = new HttpParams({encoder: this.encoder});
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('page', <any>page);
        }
        if (size !== undefined && size !== null) {
            queryParameters = queryParameters.set('size', <any>size);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        return this.httpClient.get<RatingsResponse>(`${this.configuration.basePath}/apis/${encodeURIComponent(String(apiId))}/ratings`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * List APIs
     * List public APIs for anonymous requests. List all the APIs the current user is allowed to view for authenticated requests.  The list can be filtered according to query parameters.  By default the list is sorted by alphabetic order. If a **cat** query param is sent, a specific sorting can be applied. Please refer to **cat** description for detail. 
     * @param page The page number for pagination.
     * @param size The number of items per page for pagination.
     * @param contextPath The context-path of an API.
     * @param label One of the labels of an API.
     * @param version The version of an API.
     * @param name The name of an API.
     * @param view One of the view linked with an API.
     * @param cat Name of a CATEGORY. A category is a static filter used to pre-select some APIs. It can be combined with others query params.   - FEATURED : top APIs. Sorted by alphabetical order.   - MINE : APIs subscribed by the current user. Sorted by alphabetical order.   - STARRED: Rated APIs. Sorted by Ratings DESC, nb of ratings DESC, alphabetic order.   - TRENDINGS: Subscribed APIs. Sorted by number of subscriptions DESC, alphabetic order. 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getApis(page?: number, size?: number, contextPath?: string, label?: string, version?: string, name?: string, view?: string, cat?: CategoryApiQuery, observe?: 'body', reportProgress?: boolean): Observable<ApisResponse>;
    public getApis(page?: number, size?: number, contextPath?: string, label?: string, version?: string, name?: string, view?: string, cat?: CategoryApiQuery, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ApisResponse>>;
    public getApis(page?: number, size?: number, contextPath?: string, label?: string, version?: string, name?: string, view?: string, cat?: CategoryApiQuery, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ApisResponse>>;
    public getApis(page?: number, size?: number, contextPath?: string, label?: string, version?: string, name?: string, view?: string, cat?: CategoryApiQuery, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: this.encoder});
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('page', <any>page);
        }
        if (size !== undefined && size !== null) {
            queryParameters = queryParameters.set('size', <any>size);
        }
        if (contextPath !== undefined && contextPath !== null) {
            queryParameters = queryParameters.set('context-path', <any>contextPath);
        }
        if (label !== undefined && label !== null) {
            queryParameters = queryParameters.set('label', <any>label);
        }
        if (version !== undefined && version !== null) {
            queryParameters = queryParameters.set('version', <any>version);
        }
        if (name !== undefined && name !== null) {
            queryParameters = queryParameters.set('name', <any>name);
        }
        if (view !== undefined && view !== null) {
            queryParameters = queryParameters.set('view', <any>view);
        }
        if (cat !== undefined && cat !== null) {
            queryParameters = queryParameters.set('cat', <any>cat);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        return this.httpClient.get<ApisResponse>(`${this.configuration.basePath}/apis`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get an API page
     * Get an API page.  This API has to be accessible by the current user, otherwise a 404 will be returned. 
     * @param apiId Id of an API.
     * @param pageId Id of a documentation page.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPageByApiIdAndPageId(apiId: string, pageId: string, observe?: 'body', reportProgress?: boolean): Observable<Page>;
    public getPageByApiIdAndPageId(apiId: string, pageId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Page>>;
    public getPageByApiIdAndPageId(apiId: string, pageId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Page>>;
    public getPageByApiIdAndPageId(apiId: string, pageId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (apiId === null || apiId === undefined) {
            throw new Error('Required parameter apiId was null or undefined when calling getPageByApiIdAndPageId.');
        }
        if (pageId === null || pageId === undefined) {
            throw new Error('Required parameter pageId was null or undefined when calling getPageByApiIdAndPageId.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        return this.httpClient.get<Page>(`${this.configuration.basePath}/apis/${encodeURIComponent(String(apiId))}/pages/${encodeURIComponent(String(pageId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * List API pages
     * List all documentation pages of an API.  This API has to be accessible by the current user, otherwise a 404 will be returned. 
     * @param apiId Id of an API.
     * @param page The page number for pagination.
     * @param size The number of items per page for pagination.
     * @param homepage If true, only the documentation homepage of the portal is returned.
     * @param parent The name of the parent documentation page. If not null, only this page and its children are returned.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPagesByApiId(apiId: string, page?: number, size?: number, homepage?: boolean, parent?: string, observe?: 'body', reportProgress?: boolean): Observable<PagesResponse>;
    public getPagesByApiId(apiId: string, page?: number, size?: number, homepage?: boolean, parent?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PagesResponse>>;
    public getPagesByApiId(apiId: string, page?: number, size?: number, homepage?: boolean, parent?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PagesResponse>>;
    public getPagesByApiId(apiId: string, page?: number, size?: number, homepage?: boolean, parent?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (apiId === null || apiId === undefined) {
            throw new Error('Required parameter apiId was null or undefined when calling getPagesByApiId.');
        }

        let queryParameters = new HttpParams({encoder: this.encoder});
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('page', <any>page);
        }
        if (size !== undefined && size !== null) {
            queryParameters = queryParameters.set('size', <any>size);
        }
        if (homepage !== undefined && homepage !== null) {
            queryParameters = queryParameters.set('homepage', <any>homepage);
        }
        if (parent !== undefined && parent !== null) {
            queryParameters = queryParameters.set('parent', <any>parent);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        return this.httpClient.get<PagesResponse>(`${this.configuration.basePath}/apis/${encodeURIComponent(String(apiId))}/pages`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get the API\&#39;s picture
     * Get the API\&#39;s picture.  This API has to be accessible by the current user, otherwise a 404 will be returned. 
     * @param apiId Id of an API.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPictureByApiId(apiId: string, observe?: 'body', reportProgress?: boolean): Observable<Blob>;
    public getPictureByApiId(apiId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Blob>>;
    public getPictureByApiId(apiId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Blob>>;
    public getPictureByApiId(apiId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (apiId === null || apiId === undefined) {
            throw new Error('Required parameter apiId was null or undefined when calling getPictureByApiId.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'image/_*',
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        return this.httpClient.get(`${this.configuration.basePath}/apis/${encodeURIComponent(String(apiId))}/picture`,
            {
                responseType: "blob",
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
