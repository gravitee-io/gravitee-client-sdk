/**
 * Gravitee.io Portal Rest API
 * API dedicated to the devportal part of Gravitee
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@graviteesource.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec } from '@angular/common/http';
import { Observable } from 'rxjs';
import { Key } from '../model/key';
import { Subscription } from '../model/subscription';
import { SubscriptionInput } from '../model/subscriptionInput';
import { SubscriptionsResponse } from '../model/subscriptionsResponse';
import { Configuration } from '../configuration';
export declare class SubscriptionService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    encoder: HttpParameterCodec;
    constructor(httpClient: HttpClient, basePath: string, configuration: Configuration);
    /**
     * Close a subscription
     * Close a subscription.  User must have APPLICATION_SUBSCRIPTION[DELETE] permission.
     * @param subscriptionId Id of a subscription.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    closeSubscription(subscriptionId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    closeSubscription(subscriptionId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    closeSubscription(subscriptionId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * Create a subscription.
     * Create a new subscription.  User must have APPLICATION_SUBSCRIPTION[CREATE] permission.
     * @param subscriptionInput Use to create a subscription.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    createSubscription(subscriptionInput?: SubscriptionInput, observe?: 'body', reportProgress?: boolean): Observable<Subscription>;
    createSubscription(subscriptionInput?: SubscriptionInput, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Subscription>>;
    createSubscription(subscriptionInput?: SubscriptionInput, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Subscription>>;
    /**
     * Get a subscription.
     * Get a subscription.  User must have API_SUBSCRIPTION[CREATE] or APPLICATION_SUBSCRIPTION[CREATE] permission.
     * @param subscriptionId Id of a subscription.
     * @param include Comma-separated list of related objects to include in the response.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getSubscriptionBuySubscriptionId(subscriptionId: string, include?: Array<'keys'>, observe?: 'body', reportProgress?: boolean): Observable<Subscription>;
    getSubscriptionBuySubscriptionId(subscriptionId: string, include?: Array<'keys'>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Subscription>>;
    getSubscriptionBuySubscriptionId(subscriptionId: string, include?: Array<'keys'>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Subscription>>;
    /**
     * List all subscriptions, filtered by api and/or by application. At least an api or an application must be provided.  User must have the APPLICATION_SUBSCRIPTION[READ] permission to list subscription with application query param.\\ User must have the API_SUBSCRIPTION[READ] permission to list subscription with api query param.
     * @param apiId Id of an api.
     * @param applicationId Id of an application.
     * @param page The page number for pagination.
     * @param size The number of items per page for pagination.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getSubscriptions(apiId?: string, applicationId?: string, page?: number, size?: number, observe?: 'body', reportProgress?: boolean): Observable<SubscriptionsResponse>;
    getSubscriptions(apiId?: string, applicationId?: string, page?: number, size?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SubscriptionsResponse>>;
    getSubscriptions(apiId?: string, applicationId?: string, page?: number, size?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SubscriptionsResponse>>;
    /**
     * Renew a key subscription.
     * Renew a key subscription.  User must have API_SUBSCRIPTION[UPDATE] or APPLICATION_SUBSCRIPTION[UPDATE] permission.
     * @param subscriptionId Id of a subscription.
     * @param requestBody Use to renew keys of a subscription.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    renewKeySubscription(subscriptionId: string, requestBody?: Array<string>, observe?: 'body', reportProgress?: boolean): Observable<Key>;
    renewKeySubscription(subscriptionId: string, requestBody?: Array<string>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Key>>;
    renewKeySubscription(subscriptionId: string, requestBody?: Array<string>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Key>>;
    /**
     * Revoke a key subscription.
     * Revoke a key subscription.  User must have API_SUBSCRIPTION[UPDATE] or APPLICATION_SUBSCRIPTION[UPDATE] permission.
     * @param subscriptionId Id of a subscription.
     * @param keyId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    revokeKeySubscription(subscriptionId: string, keyId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    revokeKeySubscription(subscriptionId: string, keyId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    revokeKeySubscription(subscriptionId: string, keyId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
}
