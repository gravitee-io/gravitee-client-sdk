/**
 * Gravitee.io Portal Rest API
 * API dedicated to the devportal part of Gravitee
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@graviteesource.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec } from '@angular/common/http';
import { Observable } from 'rxjs';
import { PayloadInput } from '../model/payloadInput';
import { Token } from '../model/token';
import { Configuration } from '../configuration';
export declare class AuthenticationService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    encoder: HttpParameterCodec;
    constructor(httpClient: HttpClient, basePath: string, configuration: Configuration);
    /**
     * Used to get a gravitee token from an Authorization code (PayloadInput.code). Portal API authenticates the user with the specified IDP ({identity} path param).
     * @param identity
     * @param PayloadInput OAuth2 payload for authentication.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    exchangeAuthorizationCode(identity: string, PayloadInput?: PayloadInput, observe?: 'body', reportProgress?: boolean): Observable<Token>;
    exchangeAuthorizationCode(identity: string, PayloadInput?: PayloadInput, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Token>>;
    exchangeAuthorizationCode(identity: string, PayloadInput?: PayloadInput, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Token>>;
    /**
     * Used to get a Gravitee token. This token is mandatory for all the secured resources of the Portal API.
     * @param Authorization Basic authentication.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    login(Authorization: string, observe?: 'body', reportProgress?: boolean): Observable<Token>;
    login(Authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Token>>;
    login(Authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Token>>;
    /**
     * User need to be authenticated to logout.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    logout(observe?: 'body', reportProgress?: boolean): Observable<any>;
    logout(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    logout(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * Used to get a gravitee token from a IdentityProvider token. Portal API authenticates the user with the specified IDP ({identity} path param).
     * @param identity
     * @param token
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    tokenExchange(identity: string, token: string, observe?: 'body', reportProgress?: boolean): Observable<Token>;
    tokenExchange(identity: string, token: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Token>>;
    tokenExchange(identity: string, token: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Token>>;
}
