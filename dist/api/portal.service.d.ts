/**
 * Gravitee.io Portal Rest API
 * API dedicated to the devportal part of Gravitee
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@graviteesource.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec } from '@angular/common/http';
import { Observable } from 'rxjs';
import { ConfigurationIdentitiesResponse } from '../model/configurationIdentitiesResponse';
import { ConfigurationResponse } from '../model/configurationResponse';
import { Info } from '../model/info';
import { TicketInput } from '../model/ticketInput';
import { View } from '../model/view';
import { ViewsResponse } from '../model/viewsResponse';
import { Configuration } from '../configuration';
export declare class PortalService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    encoder: HttpParameterCodec;
    constructor(httpClient: HttpClient, basePath: string, configuration: Configuration);
    /**
     * Create a ticket.
     * Create a ticket. This ticket can aim :   * a specific application   * a specific API   * the gravitee portal  User must be authenticated to use this service.
     * @param TicketInput a new ticket to create
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    createTicket(TicketInput?: TicketInput, observe?: 'body', reportProgress?: boolean): Observable<any>;
    createTicket(TicketInput?: TicketInput, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    createTicket(TicketInput?: TicketInput, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * Get picture of a View
     * Get the picture of a view.
     * @param viewId Id of a View.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getPictureByViewId(viewId: string, observe?: 'body', reportProgress?: boolean): Observable<Blob>;
    getPictureByViewId(viewId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Blob>>;
    getPictureByViewId(viewId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Blob>>;
    /**
     * Get portal configuration.
     * Get all the portal configuration from the platform settings.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getPortalConfiguration(observe?: 'body', reportProgress?: boolean): Observable<ConfigurationResponse>;
    getPortalConfiguration(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ConfigurationResponse>>;
    getPortalConfiguration(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ConfigurationResponse>>;
    /**
     * Get the identity provider list.
     * Get all the identity providers that can used in the portal.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getPortalIdentityProviders(observe?: 'body', reportProgress?: boolean): Observable<ConfigurationIdentitiesResponse>;
    getPortalIdentityProviders(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ConfigurationIdentitiesResponse>>;
    getPortalIdentityProviders(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ConfigurationIdentitiesResponse>>;
    /**
     * Get portal information.
     * Get some information about the portal (version, ...).
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getPortalInformation(observe?: 'body', reportProgress?: boolean): Observable<Info>;
    getPortalInformation(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Info>>;
    getPortalInformation(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Info>>;
    /**
     * Get a View
     * Get a specific view.
     * @param viewId Id of a View.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getViewByViewId(viewId: string, observe?: 'body', reportProgress?: boolean): Observable<View>;
    getViewByViewId(viewId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<View>>;
    getViewByViewId(viewId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<View>>;
    /**
     * Get a View list
     * Get all views of the platform.
     * @param page The page number for pagination.
     * @param size The number of items per page for pagination.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getViews(page?: number, size?: number, observe?: 'body', reportProgress?: boolean): Observable<ViewsResponse>;
    getViews(page?: number, size?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ViewsResponse>>;
    getViews(page?: number, size?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ViewsResponse>>;
}
